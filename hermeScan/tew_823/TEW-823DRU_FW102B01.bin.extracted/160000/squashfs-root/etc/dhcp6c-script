#!/bin/sh
RESOLV_IPV4="/var/etc/resolv.conf"
RESOLV_IPV6="/var/etc/resolv_ipv6.conf"
RESOLV_RDNSSD="/var/etc/resolv_rdnssd.conf"
RESOLV_DHCPV6="/var/etc/resolv_dhcpv6.conf"
RESOLV_CONF="/etc/resolv.conf"
DHCP_PD="/var/tmp/dhcp_pd"
DHCP_PD_OLD="/var/tmp/dhcp_pd.old"
DO_RADVD=$(cat /var/etc/radvd.conf | grep "^prefix $(nvram get ipv6_dhcpd_prefix)")
RADVD_PID="/var/run/radvd.pid"
AFTR_ADDR="/var/tmp/aftr_address"
WAN_PROTO=$(nvram get wan_proto)
IPV6_WAN_PROTO=$(nvram get ipv6_wan_proto)
AUTOCONFIG=$(nvram get autoconfig_type)
DSLITE_PID="/var/run/dslite.pid"
SPECIFY_DNS=$(nvram get ipv6_wan_specify_dns)
PREVIOUS_DN="/var/tmp/previous_dn"
PREVIOUS_DNS="/var/tmp/previous_dns"
PREVIOUS_IAPD="/var/tmp/previous_iapd"
DNS=$(cat $PREVIOUS_DNS)
IAPD=$(cat $PREVIOUS_IAPD)
DN=$(cat $PREVIOUS_DN)
NTP_LIST="/var/tmp/ipv6_ntp_list"
NTP=$(cat $NTP_LIST)
DHCPD6_DN="/var/tmp/dhcpd6.conf"
WANPROTO=$(nvram get ipv6_wan_proto)
LANIF=$(nvram get lan_bridge)
LANIP=$(nvram get ${WANPROTO}_lan_ip)
DNS_1=$(nvram get ${WANPROTO}_primary_dns)
DNS_2=$(nvram get ${WANPROTO}_secondary_dns)

restart_lan(){
	cli ipv6 firewall start_dynamic
	cli ipv6 radvd stop
	cli ipv6 radvd start
	cli ipv6 dhcp6d stop
	cli ipv6 dhcp6d start
	cli ipv6 route start
}

if [ -n "$new_domain_name" -a "$new_domain_name" != "$DN" ] || [ -n "$new_domain_name_servers" -a "$new_domain_name_servers" != "$DNS" ]; then
	rm -f $RESOLV_DHCPV6
	if [ -n "$new_domain_name" ]; then
		echo search $new_domain_name | sed 's/\.* / /g' | sed 's/\.*$/ /g' >> $RESOLV_DHCPV6
	fi
	if [ -n "$new_domain_name_servers" ]; then
		for nameserver in $new_domain_name_servers; do
			echo nameserver $nameserver >> $RESOLV_DHCPV6
		done
		if [ "$SPECIFY_DNS" = "1" -o "$SPECIFY_DNS" = "ipv6_wan_specify_dns = 1" ]; then
			if [ "$DNS_1" != "$DNS_2" ]; then
				echo nameserver $DNS_1 > $RESOLV_IPV6
				echo nameserver $DNS_2 >> $RESOLV_IPV6
			else
				echo nameserver $DNS_1 > $RESOLV_IPV6
				nvram set ${WANPROTO}_secondary_dns=""
			fi
		else
		        cat $RESOLV_DHCPV6 $RESOLV_RDNSSD > $RESOLV_IPV6
		fi
		cat $RESOLV_IPV6 | grep "^search" | sed -e :x -e '$!N;s/\n/ /;tx' | sed 's/ search / /g' > "$RESOLV_IPV6.tmp"
		DOMAIN=$(cat $RESOLV_IPV6.tmp)
		TOTAL=0
		COUNT=0
		COUNT2=0
		tmp=$DOMAIN
		for i in $DOMAIN; do
			TOTAL=$(($TOTAL+1))
		done

		COUNT=$TOTAL
		while [ $COUNT -gt 1 ]; do
			COUNT2=2
			while [ $COUNT2 != $COUNT -a $COUNT2 -lt $TOTAL ]; do
				domain1=$(echo $DOMAIN | cut -d ' ' -f $COUNT)
				domain2=$(echo $DOMAIN | cut -d ' ' -f $COUNT2)
				if [ $domain1 = $domain2 ]; then
					tmp=$(echo $tmp | sed 's/ '$domain1'//g' | sed 's/  / /g')
					tmp=$(echo $tmp $domain1)
				fi
				COUNT2=$(($COUNT2+1))
			done
			COUNT=$(($COUNT-1))
		done

		if [ "$SPECIFY_DNS" != "1" -a "$SPECIFY_DNS" != "ipv6_wan_specify_dns = 1" ]; then
			cat $RESOLV_DHCPV6 $RESOLV_RDNSSD > $RESOLV_IPV6
			DNSLIST=$(cat $RESOLV_DHCPV6 $RESOLV_RDNSSD | sed '/search/d' | sed 's/nameserver//g' )
			rm -f $RESOLV_IPV6
			is_same="true"
			COUNT=1
			COUNT2=1
			TOTAL=0
			for i in $DNSLIST; do
				TOTAL=$((TOTAL+1))
			done
			while [ "$TOTAL" -gt "$COUNT" ]; do
				while [ "$TOTAL" -ge "$COUNT2" ]; do
					if [ "$COUNT2" -gt "$COUNT"  ]; then
						t1=$(echo $DNSLIST | cut -d ' ' -f $COUNT)
						t2=$(echo $DNSLIST | cut -d ' ' -f $COUNT2)
						if [ "$t1" = "$t2" ]; then
						        is_same="false"
						fi
					fi
					COUNT2=$((COUNT2+1))
				done
				COUNT=$((COUNT+1))
				COUNT2=$((COUNT))
				if [ "$is_same" != "false" ]; then
					echo nameserver $t1 >> $RESOLV_IPV6
				fi
				is_same="true"
			done
			t1=$(echo $DNSLIST | cut -d ' ' -f $TOTAL)
			echo nameserver $t1 >> $RESOLV_IPV6
			sed -i '3,$d' $RESOLV_IPV6
		fi
		if [ -n "$tmp" ]; then
			echo $tmp >> $RESOLV_IPV6
		fi

		rm -rf $RESOLV_IPV6.tmp
		cat $RESOLV_IPV6 $RESOLV_IPV4 > $RESOLV_CONF
	fi
fi

if [ "$WAN_PROTO" = "wan_proto = dslite" ] || [ "$WAN_PROTO" = "dslite" ]; then
	if [ -n "$new_aftr_name" ]; then
		if [ "$new_aftr_name" != "$(cat $AFTR_ADDR)." -o ! -e $DSLITE_PID ]; then
			cli ipv6 dslite stop
			cli ipv6 dslite start $new_aftr_name
		fi
	elif [ -n "$(cat $AFTR_ADDR)" -o ! -e $DSLITE_PID ]; then
		cli ipv6 dslite start $(cat $AFTR_ADDR)
	elif [ ! -e $DSLITE_PID ]; then
		cli ipv6 dslite start
	fi
elif [ -n "$new_aftr_name" ]; then
	echo "$new_aftr_name" | sed 's/\..*$//g' > $AFTR_ADDR
fi

if [ -n "$new_ntp_servers" ]; then
	echo "$new_ntp_servers" > $NTP_LIST
elif [ -e $NTP_LIST ]; then
	rm $NTP_LIST
fi

if [ -n "$new_iapd_prefix" ]; then
	
	if [ "$new_iapd_prefix" != "$IAPD" -o ! -e "$DHCP_PD" ]; then
		ip -6 route del $(cat $DHCP_PD_OLD | sed -n '1p')/$(cat $DHCP_PD_OLD | sed -n '2p') dev lo
		if [ "$IAPD" != "" ]; then
			ip -6 addr del $LANIP/64 dev $LANIF
		fi
		cp $DHCP_PD $DHCP_PD_OLD
		cli ipv6 dhcp6c saveinfo
		killall -SIGTTIN dhcp6c
		restart_lan iapd
	elif [ "$SPECIFY_DNS" = "0" -o "$SPECIFY_DNS" = "ipv6_wan_specify_dns = 0" ] && [ -n "$new_domain_name_servers" -a "$new_domain_name_servers" != "$DNS" ]; then
		restart_lan
	elif [ -n "$new_domain_name" -a "$new_domain_name" != "$DN" ]; then
		restart_lan
	elif [ -n "$new_ntp_servers" -a "$new_ntp_servers" != "$NTP" ]; then
		restart_lan
	elif [ ! -e $RADVD_PID -o -z "$DO_RADVD" ]; then
		restart_lan
	elif [ "$new_iapd_prefix" = "$IAPD" ]; then
		killall -SIGUSR1 radvd
		killall -SIGUSR2 radvd
	fi
else
	if [ "$SPECIFY_DNS" = "0" -o "$SPECIFY_DNS" = "ipv6_wan_specify_dns = 0" ] && [ -n "$new_domain_name_servers" -a "$new_domain_name_servers" != "$DNS" ]; then
		restart_lan
	elif [ -n "$new_domain_name" -a "$new_domain_name" != "$DN" ]; then
		restart_lan
	elif [ -n "$new_ntp_servers" -a "$new_ntp_servers" != "$NTP" ]; then
		restart_lan
	fi
fi

if [ -n "$new_iapd_prefix" ]; then
	echo "$new_iapd_prefix" > $PREVIOUS_IAPD
fi
if [ -n "$new_domain_name_servers" ]; then
	echo "$new_domain_name_servers" > $PREVIOUS_DNS
fi
if [ -n "$new_domain_name" ]; then
	echo "$new_domain_name" > $PREVIOUS_DN
fi
